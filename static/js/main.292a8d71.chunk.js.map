{"version":3,"sources":["components/Temp.js","App.js","reportWebVitals.js","index.js"],"names":["Temp","useState","time","setDates","city","setCity","search","setSearch","useEffect","a","url","fetch","response","json","resjson","main","fetchApi","date","Date","toDateString","toLocaleTimeString","setInterval","className","type","value","onChange","event","target","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQA2DeA,EAzDF,WACX,MAA2BC,mBAASC,GAApC,mBAAeC,GAAf,WACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BJ,mBAAS,UAArC,mBAAOK,EAAP,KAAeC,EAAf,KACAC,qBAAU,YACM,uCAAG,gCAAAC,EAAA,6DACTC,EADS,4DACkDJ,EADlD,iEAEQK,MAAMD,GAFd,cAETE,EAFS,gBAGOA,EAASC,OAHhB,OAGTC,EAHS,OAIfT,EAAQS,EAAQC,MAJD,2CAAH,qDAMdC,KACC,CAACV,IACJ,IAAIW,GAAO,IAAIC,MAAOC,eAClBjB,GAAO,IAAIgB,MAAOE,qBAStB,OAJAC,aAJe,WACjBnB,GAAO,IAAIgB,MAAOE,qBACdjB,EAASD,KAEU,KAKnB,mCACE,sBAAKoB,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACE,uBACEC,KAAK,SACLD,UAAU,aACVE,MAAOlB,EACPmB,SAAU,SAACC,GACTnB,EAAUmB,EAAMC,OAAOH,YAI3BpB,EAGA,gCACE,sBAAKkB,UAAU,OAAf,UACE,qBAAIA,UAAU,WAAd,UACE,mBAAGA,UAAU,uBADf,IAC0ChB,KACpCW,EACN,uBAAMf,EACN,qBAAIoB,UAAU,OAAd,UAAsBlB,EAAKwB,KAA3B,WACA,qBAAIN,UAAU,UAAd,mBAA+BlB,EAAKyB,SAApC,iBAAyDzB,EAAK0B,SAA9D,cAEF,qBAAKR,UAAU,cACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,mBAbjB,mBAAGA,UAAU,MAAb,iCC5BKS,G,MARH,WACV,OACC,mCACA,cAAC,EAAD,QCMYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.292a8d71.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./css/style.css\";\r\nconst Temp = () => {\r\n  const [dates , setDates] = useState(time);\r\n  const [city, setCity] = useState(null);\r\n  const [search, setSearch] = useState(\"Kanpur\");\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=3d733b4bed9873cb92c6dc6d8f5bbeaa`;\r\n      const response = await fetch(url);\r\n      const resjson = await response.json();\r\n      setCity(resjson.main);\r\n    };\r\n    fetchApi();\r\n  }, [search]);\r\n  var date = new Date().toDateString();\r\n  var time = new Date().toLocaleTimeString();\r\n  const update = () => {\r\ntime = new Date().toLocaleTimeString();\r\n    setDates(time);\r\n  };\r\n  setInterval(update , 1000)\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"box\">\r\n        <div className=\"inputData\">\r\n          <input\r\n            type=\"search\"\r\n            className=\"inputfield\"\r\n            value={search}\r\n            onChange={(event) => {\r\n              setSearch(event.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n        {!city ? (\r\n          <p className=\"err\">No Data Found</p>\r\n        ) : (\r\n          <div>\r\n            <div className=\"info\">\r\n              <h2 className=\"Location\">\r\n                <i className=\"fas fa-street-view\"></i> {search}\r\n              </h2>{date}\r\n              <br/>{time}\r\n              <h1 className=\"temp\">{city.temp}°C</h1>\r\n              <h3 className=\"min_max\">Min : {city.temp_min}°C | Max : {city.temp_max}°C</h3>\r\n            </div>\r\n            <div className=\"wave -one\"></div>\r\n            <div className=\"wave -two\"></div>\r\n            <div className=\"wave -three\"></div>\r\n          </div>\r\n         )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Temp;\r\n","import React from 'react';\nimport Temp from './components/Temp';\nimport './App.css';\nconst App = () => {\n  return (\n   <>\n   <Temp />\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}